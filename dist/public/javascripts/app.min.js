'use strict';

(function () {
  'use strict';

  angular.module('app', ['ui.router', 'angular-loading-bar', 'ngAnimate', 'restangular', 'app.home', 'app.contact']).config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {
    cfpLoadingBarProvider.includeSpinner = false;
  }]);
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').run(['profileService', 'Restangular', '$rootScope', '$state', run]);

  function run(profileService, Restangular, $rootScope, $state) {
    $rootScope.$on('$stateChangeSuccess', function () {
      // Define o título da página a cada troca de estado da aplicação
      $rootScope.stateTitle = $state.current.data.stateTitle;
    });

    // Inteceptação de erros nas chamadas via Restangular
    Restangular.setErrorInterceptor(function (response, deferred, responseHandler) {
      if (response.status !== 200) {
        console.log(response);
        return false;
      }

      return true;
    });

    $state.go('app.home');
    profileService.getUserGithub();
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app.contact', []);
})();
'use strict';

(function () {
  'use strict';

  angular.module('app.home', []);
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('contactService', ['Restangular', contactService]);

  function contactService(Restangular) {
    /**
     * Realiza a chamada da api interna, para criar um novo contato no banco.
     * @param contact [schema mongoose]
     * @param successCallback [function]
     * @param errorCallback [function]
     * return object
     */
    function create(contact, successCallback, errorCallback) {
      return Restangular.one('api', 'contact').customPUT(contact).then(function (response) {
        successCallback(Restangular.stripRestangular(response));
      }, function (response) {
        errorCallback(response);
      });
    }

    return {
      create: create
    };
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').factory('profileService', ['Restangular', profileService]);

  function profileService(Restangular) {
    var profile;

    /**
     * Retorna a instância de profileService no contexto.
     * return profile
     */
    function get() {
      return profile;
    }

    /**
     * Realiza chamada a api pública do github e disponibiliza o objeto na instância de profileService.
     * return void 
     */
    function getUserGithub() {
      Restangular.oneUrl('github', 'https://api.github.com/users/felippem').get().then(function (response) {
        profile = Restangular.stripRestangular(response);
      });
    }

    return {
      get: get,
      getUserGithub: getUserGithub
    };
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').config(['$stateProvider', function ($stateProvider) {
    $stateProvider.state('app', {
      url: '',
      views: {
        'profile': {
          templateUrl: 'modules/templates/common/shared/profile.html',
          controller: 'ProfileController',
          controllerAs: 'profileCtrl'
        },
        'content': {}
      },
      abstract: true
    });
  }]).controller('AppController', ['$state', '$scope', AppController]);

  function AppController($state, $scope) {
    var appCtrl = this;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app.contact').config(['$stateProvider', function ($stateProvider) {
    $stateProvider.state('app.contact', {
      url: '/fale-comigo',
      views: {
        'content@': {
          templateUrl: 'modules/templates/contact/index.html',
          controller: 'ContactController',
          controllerAs: 'contactCtrl'
        }
      },
      data: {
        stateTitle: "Vamos trabalhar juntos?",
        animate: "slideTop"
      }
    });
  }]).controller('ContactController', ['contactService', '$state', '$scope', ContactController]);

  function ContactController(contactService, $state, $scope) {
    var contactCtrl = this;

    _setFeedback('Pronto, enviar', 'default');

    contactCtrl.send = function (viewModel) {
      if (!viewModel) {
        return;
      }

      _create(viewModel);
    };

    /**
     * Métodos privados
     */

    /**
     * Realiza a chamada ao service, para criar um novo contato no banco.
     * @param viewModel [contexto]
     */
    function _create(viewModel) {
      contactService.create(viewModel, function () {
        _setFeedback('Tudo ok. Obrigado pelo contato.', 'success');
        $scope.contact = undefined;
      }, function (response) {
        _setFeedback('Ops, deu ruim.', 'error');
        console.log(response);
      });
    }

    /**
     * Define no $scope um objeto responsável por conter mensagens de interação
     * com o usuário e demais questões pertinentes ao contexto.
     * @param message [string]
     * @param className [string]
     */
    function _setFeedback(message, className) {
      $scope.feedback = {
        message: message,
        class: className
      };
    }
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app.home').config(['$stateProvider', function ($stateProvider) {
    $stateProvider.state('app.home', {
      url: '/inicio',
      views: {
        'content@': {
          templateUrl: 'modules/templates/home/index.html',
          controller: 'HomeController',
          controllerAs: 'homeCtrl'
        }
      },
      data: {
        stateTitle: "Meu site, minha vida.",
        animate: "slideTop"
      }
    });
  }]).controller('HomeController', ['$state', '$scope', HomeController]);

  function HomeController($state, $scope) {
    var homeCtrl = this;
  }
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').controller('ProfileController', ['profileService', '$state', '$scope', ProfileController]);

  function ProfileController(profileService, $state, $scope) {
    var profileCtrl = this;

    profileCtrl.service = profileService;
  }
})();